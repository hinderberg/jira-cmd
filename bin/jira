#!/usr/bin/env node

var program = require('commander');
var auth = require('./helpers/auth');

var config = require('../lib/config');
var jira = require('../lib/jira');

var issuesLogger = require('../lib/log/issues');
var projectsLogger = require('../lib/log/projects');
var usersLogger = require('../lib/log/users');

var zeroArgs = require('./helpers/zero-args');

/* Issues */

program
    .command('open')
    .description('All open issues')
    .option('-p, --project <name>', 'Defines project', String, config.defaultProject)
    .option('-v, --fixVersion <fix version>', 'Defines fixed version', String, config.defaultVersion)
    .option('-s, --status <status>', 'Defines by status', String, 'OPEN')
    .action(function (options) {
        auth.setConfig(function (auth) {
            if (auth) {
                jira.filterBy(options, issuesLogger.issues);
            }
        });
    });

program
    .command('filter')
    .description('issues actions')
    .option('-p, --project <id>', 'Defines project', String, config.defaultProject)
    .option('-v, --fixVersion <id>', 'Defines fixed version', String, config.defaultVersion)
    .option('-a, --assignee <id>', 'Defines assignee', String)
    .option('-t, --type <id>', 'Defines type', String)
    .option('-s, --status <id>', 'Defines status', String)
    .action(function (options) {
        auth.setConfig(function (auth) {
            if (auth) {
                jira.filterBy(options, issuesLogger.issues);
            }
        });
    });

program
    .command('search <term>')
    .description('Find issues')
    .action(function (query) {
        auth.setConfig(function (auth) {
            if (auth) {
                jira.search(query, issuesLogger.issues);
            }
        });
    });


/* Users */

program
    .command('assignable')
    .description('Get all users in a project')
    .option('-p, --project <id>', 'Defines project', String, config.defaultProject)
    .option('-u, --user <name>', 'Defines username', String)
    .option('-i, --issue <id>', 'Defines issue id', String)
    .action(function (options) {
        auth.setConfig(function (auth) {
            if (auth) {
                jira.project(options.project, function (err, result) {
                    if (err) {
                        return console.log(err);
                    }

                    options.project = result.key;
                    jira.assignable(options, usersLogger.users);
                });
            }
        });
    });

/* Project */

program
    .command('versions')
    .description('List all versions for project')
    .option('-p, --project <name>', 'Filter by project', String)
    .action(function (options) {
        auth.setConfig(function (auth) {
            if (auth) {
                var project = options.project || config.defaultProject;
                jira.versions(project, projectsLogger.versions);
            }
        });
    });

/* Config */

program
    .command('config')
    .description('Change configuration')
    .option('-c, --clear', 'Clear stored configuration')
    .action(function (options) {
        if (options.clear) {
            auth.clearConfig();
        } else {
            auth.setConfig();
        }
    }).on('--help', function () {
        console.log('  Config Help:');
        console.log();
        console.log('    Jira URL: https://foo.atlassian.net/');
        console.log('    Username: user (for user@foo.bar)');
        console.log('    Password: Your password');
        console.log();
    });


/* Setup */

program
    .version('v0.0.1')
    .command('me', 'its all about you')
    .command('issue', 'actions on a sigle issue')
    .parse(process.argv);


zeroArgs.run();