#!/usr/bin/env node

var program = require('commander');
var fileConfig = require('./helpers/fileConfig');

var config = require('../lib/config');
var jira = require('../lib/jira');

var create = require('./helpers/create');

var issuesLogger = require('../lib/log/issues');
var usersLogger = require('../lib/log/users');

var zeroArgs = require('./helpers/zero-args');

program
    .command('detail <issueId>')
    .description('Issue detail')
    .action(function (issueId) {
        fileConfig.setConfig(function (fileConfig) {
            if (fileConfig) {
                jira.issue(issueId, issuesLogger.issue);
            }
        });
    });

program
    .command('assign <issueId> <userId>')
    .description('Assign issue')
    .action(function (issueId, userId) {
        fileConfig.setConfig(function (fileConfig) {
            if (fileConfig) {
                userId = userId || config.fileConfig.user;

                jira.assign(issueId, userId, issuesLogger.assign);
            }
        });
    });


program
    .command('field <issueId> <name>')
    .description('Get value for field on issue')
    .action(function (issueId, name) {

        fileConfig.setConfig(function (fileConfig) {
            if (fileConfig) {
                jira.getFieldValueOnIssue(issueId, name, issuesLogger.field);
            }
        })

    });

program
    .command('comment <issueId> <text>')
    .description('Comment an issue')
    .action(function (issueId, text) {
        fileConfig.setConfig(function (fileConfig) {
            if (fileConfig) {
              jira.comment(issueId, text, issuesLogger.comment);
            }
        });
    });



program
    .command('comments <issueId>')
    .description('Show comments on a issue')
    .option('-c, --clear', 'Clear stored configuration')
    .action(function (issueId) {
        fileConfig.setConfig(function (fileConfig) {
            if (fileConfig) {
                jira.showComments(issueId, issuesLogger.showComments);
            }
        });
    });

program
    .command('transitions <issueId>')
    .description('Show available transitions for issue with id')
    .action(function (issueId) {
        fileConfig.setConfig(function (fileConfig) {
            if (fileConfig) {
                jira.listTransitions(issueId, issuesLogger.transitions);
            }
        });
    });

program
    .command('transition <issueId> <transitionId>')
    .description('Do transition for issue with id')
    .action(function (issueId, transitionId) {
        fileConfig.setConfig(function (fileConfig) {
            if (fileConfig) {
                jira.transition(issueId, transitionId, issuesLogger.transition);
            }
        });
    });


program
    .command('create')
    .description('Create issue')
    .option('-p, --project <name>', 'Defines project', String, config.fileConfig.defaultProject)
    .action(function (options) {
        fileConfig.setConfig(function (fileConfig) {
            if (fileConfig) {
                create.prompt(options);
            }
        });
    });


/* Setup */

program
    .parse(process.argv);

zeroArgs.run();